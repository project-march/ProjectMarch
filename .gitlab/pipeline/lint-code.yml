#################
# flake8 linter #
#################
# Runs a Python linter on the code to see if the code style is consistent and
# to avoid common mistakes
flake8:
  stage: Lint code
  # The "$TAG" variable is set by the rules below
  image:
    name: $CI_REGISTRY_IMAGE/flake8:$TAG
    entrypoint: [""]
  script:
    # Return the return value of the rightmost failed command. It is unlikely that `sed` fails, but
    # the if the flake8 runner fails then everything is propagated through. This means that the
    # return value of the whole pipe sequence will be the same as the return value of
    # the flake8 command.
    - set -o pipefail
    # The codeclimate format returns violations on new lines, but GitLab expects a json
    # array. This adds the required "[", "]" and ","s for the file to be interpreted as
    # a valid JSON array.
    # Note that the following command doesn't use the default entrypoint defined in the dockerfile 'flake8'.
    - >
      flake8 --config .flake8 --format=codeclimate ros1/src ros2/src utility_scripts/ |
      sed '1s;^;[;' | sed 's/$/,/g' | sed '$ s/.$//' | sed '$ a ]' | tee codeclimate.json
    # If the above statement succeeds, then codeclimate.json will be empty. We add an empty
    # array to ensure that the codeclimate.json file still has a valid json syntax
    - echo "[]" | tee codeclimate.json;
  after_script:
    # The next statement will convert the codeclimate.json into a human-readable format.
    - |
      echo "---Start Violations---" && \
      cat codeclimate.json | python3 -c "import sys, json; [print(
          '{0}:{1}:{2} - {3}:{4}: {5} : {6} {7}'.format(el['location']['path'],
          el['location']['lines']['begin'], el['location']['positions']['begin']['column'],
          el['location']['lines']['end'], el['location']['positions']['end']['column'],
          el['categories'], el['check_name'], el['description'])) for el in json.load(sys.stdin)];" \
      && echo "---End Violations---"
  artifacts:
    expire_in: 2 weeks
    reports:
      codequality: codeclimate.json
  variables:
    DOCKER_FILE: ".gitlab/dockerfiles/flake8"
  needs:
    - job: "flake8 container build"
      optional: true
  rules:
    # The first three rules are only relevant when the Dockerfile has changed, because
    # it defines the correct TAG
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $DOCKER_FILE
        - ".flake8"
        - "requirements_flake8.txt"
        - "pyproject.toml"
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - $DOCKER_FILE
        - ".flake8"
        - "requirements_flake8.txt"
        - "pyproject.toml"
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        TAG: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # The next if is for a MR goes through for a protected branch. (e.g. dev and main)
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      variables:
        TAG: $CI_COMMIT_BRANCH

#######################
# clang-format linter #
#######################
# Check if the C++ code is consistent in code formatting (correct amount of tabs/spaces,
# correct indentation etc.)
clang-format:
  stage: Lint code
  image: $CI_REGISTRY_IMAGE/clang_format:$TAG
  variables:
      DOCKER_FILE: ".gitlab/dockerfiles/clang_format"
  script:
    - run-clang-format.py -r ros1/src ros2/src --style=file
  needs:
    - job: "clang_format container build"
      optional: true
  rules:
    # These rules are here to select a different Docker image depending on the
    # running conditions. The statements are evaluated from top to bottom until a rule
    # is matched.
    # They can be interpreted as:
    #   1. Run if the pipeline is a MR and the Dockerfile has changed with the image
    #      created from the changed Dockerfile.
    #   2. Don't run if the pipeline is both a branch and in a merge request
    #      This is to avoid duplicate pipelines where both a MR pipeline and a branch pipeline
    #      is scheduled.
    #   3. Run if the pipline is for a branch without a MR and the Dockerfile has changed
    #      with the image created from the changed Dockerfile.
    #   4. In all other cases, if a clang_format, C or C++ related file has changed run with
    #      the image from the Dockerfile in `main`.
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "ros1/src/**/*.{c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx}"
        - "ros2/src/**/*.{c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx}"
        - ".clang-format"
        - ".clang-format-ignore"
      variables:
        TAG: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # The next if is for a MR goes through for a protected branch. (e.g. dev and main)
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - "ros1/src/**/*.{c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx}"
        - "ros2/src/**/*.{c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx}"
        - ".clang-format"
        - ".clang-format-ignore"
      variables:
        TAG: $CI_COMMIT_BRANCH
