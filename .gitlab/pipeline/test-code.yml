###################
# Test code stage #
###################
# Run the tests, both for noetic and foxy. These stages are separated because they
# are not dependent on eachother. This enables extra parallelization.
.base_tester:
  stage: Test code
  image: $CI_REGISTRY_IMAGE/$ROS_CODENAME:$TAG
  script:
    - cd ros2
    - source /opt/ros/foxy/local_setup.bash && source install/local_setup.bash
    - apt install lcov -y
    - pushd src/libraries/bluespace_ai_xsens_ros_mti_driver/lib/xspublic && make && popd
    - git submodule update --remote src/libraries/acados
    - colcon build --packages-select acados
    - colcon build --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" -DCMAKE_BUILD_TYPE=Debug --event-handlers console_direct+ --ament-cmake-args -DCMAKE_CXX_FLAGS="$COVERAGE_FLAGS" -DCMAKE_C_FLAGS="$COVERAGE_FLAGS"
    - lcov -q -c --directory build -o lcov.base --initial
    - 'colcon test --abort-on-error --packages-skip control_msgs control_toolbox \
      controller_interface controller_manager controller_manager_msgs diagnostic_updater diff_drive_controller effort_controllers \
      force_torque_sensor_broadcaster forward_command_controller gazebo_ros2_control gazebo_ros2_control_demos gripper_controllers \
      hardware_interface imu_sensor_broadcaster joint_state_broadcaster joint_state_controller joint_trajectory_controller \
      position_controllers realsense_gazebo_plugin realtime_tools ros2_control ros2_control_test_assets ros2_controllers \
      ros2bag rosbag2 rosbag2_compression rosbag2_compression_zstd rosbag2_cpp rosbag2_performance_benchmarking rosbag2_py \
      rosbag2_storage rosbag2_storage_default_plugins rosbag2_test_common rosbag2_tests rosbag2_transport shared_queues_vendor \
      ros2controlcli soem transmission_interface velocity_controllers'
    - colcon test-result --verbose
    - lcov -q -c --directory build -o lcov.test
    - lcov -q -a lcov.base -a lcov.test -o lcov.total
    - lcov --config-file .lcovrc -r lcov.total "*/opt/*" "*/usr/*" "*/build/*" "*/install/*" "*/libraries/*" "*/test/*" "*.hpp" "*.h" "*/c_generated_code/*" -o lcov.filtered
    - genhtml --legend --demangle-cpp lcov.filtered -o coverage
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - ros2/coverage/
  variables:
    COVERAGE_FLAGS: "-fprofile-arcs -ftest-coverage -DCOVERAGE_RUN=1"
  coverage: /\s*lines.*:\s(\d+\.\d+\%\s\(\d+\sof\s\d+.*\))/
  rules:
    # These rules are checking if certain values have the correct values.
    # These variables are predefined by GitLab and their definitions
    # can be found on https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
      variables:
        TAG: $CI_COMMIT_REF_NAME
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "$DOCKER_FILE"
        - "$ROS_VERSION/**/package.xml"
        - "requirements.txt"
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "$ROS_VERSION/**/*"
      variables:
        TAG: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # The next if is for a MR goes through for a protected branch. (e.g. dev and main)
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - "$ROS_VERSION/**/*"
      variables:
        TAG: $CI_COMMIT_BRANCH

foxy:test:
  variables:
    ROS_VERSION: "ros2"
    ROS_CODENAME: "foxy"
    DOCKER_FILE: ".gitlab/dockerfiles/foxy"
  needs:
    - job: "foxy:build"
      artifacts: true
  extends:
    - .base_tester
