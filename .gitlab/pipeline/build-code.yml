####################
# Build code stage #
####################
# Run the build command to see if everything compiles without errors. This is a
# separate stage for the noetic and for the foxy code, because they are not dependent
# on each other and can therefore be run in parallel.
# Besides compiling, this also produces a "compile_commands.json" file that is used
# by subsequent C++ static analysis stages.

# The following two hidden jobs are used to reduce duplication because these rules are
# almost the same for a lot of subsequent jobs. They only vary in a few ways, which is why
# some variables are introduced. The following three variables change, depending on the
# version of ROS:
#   1. ROS_VERSION, ros2
#   2. ROS_CODENAME, foxy
#   3. DOCKER_FILE, the path of the Dockerfile that defines the execution environment. This
#      points to a ROS2 specific Dockerfile
.base_builder:
  stage: Build code
  # Depending on the rules below, `TAG` has a different value.
  # In most cases, this will just be `main`, unless the Dockerfile has
  # changed.
  image: $CI_REGISTRY_IMAGE/$ROS_CODENAME:$TAG
  artifacts:
    expire_in: 2 weeks
    paths:
      - $ROS_VERSION/build/
      - $ROS_VERSION/install/
      - $ROS_VERSION/log/
  script:
    - apt install -qqy lsb-release gnupg2 curl
    - echo "deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg" | sudo tee /etc/apt/sources.list.d/robotpkg.list
    - curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | sudo apt-key add -
    - apt update
    - apt install -qqy robotpkg-py38-pinocchio robotpkg-pinocchio=3.0.0
    - export PATH=/opt/openrobots/bin:$PATH
    - export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
    - export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
    - export PYTHONPATH=/opt/openrobots/lib/python3.10/site-packages:$PYTHONPATH # Adapt your desired python version here
    - export CMAKE_PREFIX_PATH=/opt/openrobots:$CMAKE_PREFIX_PATH
    - cd $ROS_VERSION/
    - source /opt/ros/$ROS_CODENAME/local_setup.bash
    - pushd src/libraries/bluespace_ai_xsens_ros_mti_driver/lib/xspublic && make && popd
    - PREFIX=/home/gmp/  # Change this to install GMP wherever you want.                                                  # Start of GiNaC installation
    - curl -fLO https://gmplib.org/download/gmp/gmp-6.2.1.tar.xz
    - tar -xf gmp-6.2.1.tar.xz
    - cd gmp-6.2.1
    - ./configure --prefix=$PREFIX
    - make all
    - make install
    - cp gmpxx.h $PREFIX/include
    - export GMP_INCLUDE_DIR=$PREFIX/include
    - export GMP_LIBRARIES=$PREFIX/lib
    - apt install -qqy libmpfr-dev libgmp-dev libboost-all-dev
    - git submodule update --remote src/libraries/ginac
    - mkdir -p src/libraries/ginac/build && pushd src/libraries/ginac/build && cmake .. && make && make install && popd   # End of GiNaC installation
    # - git submodule update --remote src/libraries/acados
    # - colcon build --packages-select acados
    - colcon build --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" --event-handlers console_direct+
  rules:
    # These rules are checking if certain values have the correct values.
    # These variables are predefined by GitLab and their definitions
    # can be found on https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
      variables:
        TAG: $CI_COMMIT_REF_NAME
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "$DOCKER_FILE"
        - "$ROS_VERSION/**/package.xml"
        - "requirements.txt"
      variables:
        TAG: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - $DOCKER_FILE
      variables:
        TAG: $CI_COMMIT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "$ROS_VERSION/**/*"
        - ".clang-tidy"
      variables:
        TAG: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # The next if is for a MR goes through for a protected branch. (e.g. dev and main)
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      changes:
        - "$ROS_VERSION/**/*"
        - ".clang-tidy"
      variables:
        TAG: $CI_COMMIT_BRANCH

# Define the values of the ROS2 specific instances of
# the ".base_builder" job

foxy:build:
  variables:
    ROS_VERSION: "ros2"
    ROS_CODENAME: "foxy"
    DOCKER_FILE: ".gitlab/dockerfiles/foxy"
  needs:
    - job: "ROS2 container build"
      optional: true
  extends:
    - .base_builder
