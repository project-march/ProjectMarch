// Copyright 2020 Project March.

#ifndef MARCH_HARDWARE_ERROR_TYPE_H
#define MARCH_HARDWARE_ERROR_TYPE_H
#include <ostream>

namespace march {
namespace error {
    enum class ErrorType {
        INVALID_ACTUATION_MODE = 100,
        INVALID_ACTUATE_POSITION = 101,
        ENCODER_RESET = 102,
        OUTSIDE_HARD_LIMITS = 103,
        TARGET_EXCEEDS_MAX_DIFFERENCE = 104,
        TARGET_TORQUE_EXCEEDS_MAX_TORQUE = 105,
        PDO_OBJECT_NOT_DEFINED = 106,
        PDO_REGISTER_OVERFLOW = 107,
        WRITING_INITIAL_SETTINGS_FAILED = 108,
        NO_SOCKET_CONNECTION = 109,
        NOT_ALL_SLAVES_FOUND = 110,
        FAILED_TO_REACH_OPERATIONAL_STATE = 111,
        INVALID_ENCODER_COUNTS_PER_ROTATION = 112,
        INVALID_RANGE_OF_MOTION = 114,
        INVALID_SLAVE_CONFIGURATION = 115,
        NOT_ALLOWED_TO_ACTUATE = 116,
        INVALID_SLAVE_INDEX = 117,
        MISSING_URDF_JOINT = 118,
        MISSING_REQUIRED_KEY = 119,
        INIT_URDF_FAILED = 120,
        INVALID_SW_STRING = 121,
        SLAVE_LOST_TIMOUT = 122,
        MISSING_ENCODER = 123,
        MISSING_MOTOR_CONTROLLER = 124,
        MISSING_TEMPERATURE_GES = 125,
        ODRIVE_WRONG_AXIS_NUMBER = 126,
        INVALID_MOTOR_CONTROLLER = 127,
        PREPARE_ACTUATION_ERROR = 128,
        INVALID_ENCODER_DIRECTION = 129,
        BUSY_WAITING_FUNCTION_MAXIMUM_TRIES_REACHED = 130,
        UNKNOWN = 999,
    };

    const char* getErrorDescription(ErrorType type);

    std::ostream& operator<<(std::ostream& s, ErrorType type);
} // namespace error
} // namespace march

#endif // MARCH_HARDWARE_ERROR_TYPE_H
